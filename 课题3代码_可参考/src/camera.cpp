#include <bits/stdc++.h>
#include "camera.h"
using std::cout, std::endl;


//Initialize camera
std::vector<double> camera_init(Parameter& params)
{
    double FrameRate = 50.0;
    double ExTime = 4000.0;


    // if(argc > 3)
    // {
    //     std::cerr << "Too many arguments." << std::endl;
    //     std::cerr << "Usage: " << argv[0] << " --FPS=[FPS] --EXTIME=[Exposure Time]" << std::endl;
    //     return {-1};
    // }

    // for(int i = 1; i < argc; ++i)
    // {
    //     std::string arg = argv[i];

    //     if(arg.find("--FPS=") == 0)
    //     {
    //         std::string fpsString = arg.substr(6);
    //         FrameRate = std::stod(fpsString);
    //         if(FrameRate <= 0 || FrameRate > 150)
    //         {
    //             std::cerr << "FPS must be greater than 0 and lower than 30." << std::endl;
    //             return {-2};
    //         }
    //     }
    //     else if(arg.find("--EXTIME=") == 0)
    //     {
    //         std::string EXTIMEString = arg.substr(9);
    //         ExTime = std::stod(EXTIMEString);
    //         if(ExTime <= 0)
    //         {
    //             std::cerr << "Exposure time must be greater than 0." << std::endl;
    //             return {-3};
    //         }
    //     }
    //     else if(!arg.find("--help") || !arg.find("-H"))
    //     {
    //         std::cout << "Usage: " << argv[0] << " --FPS=[FPS] --EXTIME=[Exposure Time]" << std::endl;
    //         return {-4};
    //     }
    //     else
    //     {
    //         std::cerr << "Unknown Parameters:" << arg << std::endl;
    //         std::cerr << "Usage: " << argv[0] << " --FPS=[FPS] --EXTIME=[Exposure Time]" << std::endl;
    //         return {-1};
    //     }
    // }
    FrameRate = params.FPS;
    ExTime = params.EXTIME;
    
    if(FrameRate * ExTime > 1000000.0)
    {
        // std::cerr << "The FPS and Exposure time are too long!" << std::endl;
        LOG(ERROR) << "The FPS and Exposure time are too long!";
        return {-1};
    }

    std::cout << "FPS is set to " << FrameRate << "." << std::endl;
    std::cout << "Exposure time is set to " << ExTime << "." << std::endl;
    LOG(INFO) << "FPS is set to " << FrameRate << ".";
    LOG(INFO) << "Exposure time is set to " << ExTime << ".";

    return {FrameRate, ExTime};
}


//Set camera parameters
int camera_set( Pylon::CBaslerUniversalInstantCamera& camera, double FrameRate, double ExTime)
{
    camera.Open();
    // Set camera work mode and fps
    camera.AcquisitionMode.SetValue(AcquisitionMode_Continuous);
    camera.AcquisitionFrameRateEnable.SetValue(true);
    camera.AcquisitionFrameRate.SetValue(FrameRate);
    camera.ExposureTimeMode.TrySetValue(ExposureTimeMode_Standard);
    camera.ExposureTime.TrySetValue(ExTime);
    camera.PixelFormat.SetValue(PixelFormat_Mono12);

    // Set the the Gain Auto auto function to its minimum lower limit
    camera.GainAuto.SetValue(GainAuto_Off);
    camera.Gain.TrySetValue(24);

    // Enable sensor binning
    // Note: Available on selected camera models only
    // camera.BinningSelector.SetValue(BinningSelector_Sensor);
    // Enable horizontal binning by 4
    camera.BinningHorizontal.SetValue(4);
    // Enable vertical binning by 2
    camera.BinningVertical.SetValue(1);
    // Set the horizontal binning mode to Average
    camera.BinningHorizontalMode.SetValue(BinningHorizontalMode_Average);
    // Set the vertical binning mode to Average
    camera.BinningVerticalMode.SetValue(BinningVerticalMode_Average);

    // Set the width to the maximum value
    camera.Width.SetValue(480);
    // Set the height to 500
    camera.Height.SetValue(1200);
    // Set the offset to 0
    camera.OffsetX.SetValue(0);
    camera.OffsetY.SetValue(0);

    // The parameter MaxNumBuffer can be used to control the count of buffers
    // allocated for grabbing. The default value of this parameter is 10.
    camera.MaxNumBuffer = 5;    //3最好

    return 0;
}

void CreatehdrFile(std::ofstream &hdrFile, const std::string &hdr_filename,
                   const int &sample, const int &cnt)
{
    hdrFile.open(hdr_filename);
    if (hdrFile.is_open())
    {
        hdrFile << "ENVI\n";
        hdrFile << "description = {\n";
        hdrFile << "  File Imported into ENVI.}\n";
        hdrFile << "samples = " << sample << "\n";
        hdrFile << "lines = " << cnt << "\n";
        hdrFile << "bands = 480\n";
        hdrFile << "header offset = 0\n";
        hdrFile << "file type = ENVI Standard\n";
        hdrFile << "data type = 12\n";
        hdrFile << "interleave = bil\n";
        hdrFile << "sensor type = Unknown\n";
        hdrFile << "byte order = 0\n";
        hdrFile << "x start = 0\n";
        hdrFile << "y start = 0\n";
        hdrFile << "default bands = {145,79,26}\n";
        hdrFile << "wavelength units = Nanometers\n";
        hdrFile << "wavelength = {391.5903129,392.9546887,394.3186942,395.6823301,397.0455971,\
        398.4084957,399.7710268,401.1331909,402.4949887,403.856421,405.2174883,406.5781914,407.9385309,\
        409.2985075,410.6581219,412.0173747,413.3762667,414.7347984,416.0929706,417.450784,418.8082391,\
        420.1653368,421.5220776,422.8784622,424.2344913,425.5901656,426.9454858,428.3004524,429.6550663,\
        431.009328,432.3632383,433.7167978,435.0700072,436.4228671,437.7753783,439.1275414,440.479357,\
        441.8308259,443.1819488,444.5327262,445.8831589,447.2332475,448.5829928,449.9323953,451.2814558,\
        452.630175,453.9785534,455.3265918,456.6742909,458.0216513,459.3686737,460.7153588,462.0617072,\
        463.4077197,464.7533968,466.0987393,467.4437478,468.7884231,470.1327657,471.4767764,472.8204558,\
        474.1638046,475.5068235,476.8495131,478.1918742,479.5339074,480.8756133,482.2169926,483.5580461,\
        484.8987744,486.2391781,487.5792579,488.9190146,490.2584487,491.597561,492.9363521,494.2748227,\
        495.6129734,496.9508051,498.2883182,499.6255135,500.9623917,502.2989534,503.6351993,504.9711301,\
        506.3067464,507.642049,508.9770385,510.3117155,511.6460808,512.980135,514.3138788,515.6473128,\
        516.9804378,518.3132544,519.6457633,520.9779652,522.3098606,523.6414504,524.9727352,526.3037156,\
        527.6343923,528.964766,530.2948373,531.624607,532.9540758,534.2832442,535.6121129,536.9406827,\
        538.2689542,539.5969281,540.924605,542.2519857,543.5790707,544.9058608,546.2323567,547.5585589,\
        548.8844683,550.2100854,551.5354109,552.8604456,554.18519,555.5096449,556.8338109,558.1576887,\
        559.481279,560.8045824,562.1275996,563.4503314,564.7727783,566.094941,567.4168202,568.7384166,\
        570.0597309,571.3807637,572.7015157,574.0219876,575.34218,576.6620936,577.9817291,579.3010872,\
        580.6201686,581.9389738,583.2575036,584.5757587,585.8937397,587.2114473,588.5288822,589.8460451,\
        591.1629365,592.4795573,593.795908,595.1119894,596.427802,597.7433467,599.058624,600.3736347,\
        601.6883793,603.0028587,604.3170733,605.6310241,606.9447115,608.2581362,609.5712991,610.8842006,\
        612.1968415,613.5092225,614.8213442,616.1332074,617.4448126,618.7561606,620.0672519,621.3780874,\
        622.6886677,623.9989934,625.3090652,626.6188838,627.9284499,629.2377642,630.5468272,631.8556397,\
        633.1642024,634.4725159,635.7805809,637.088398,638.3959681,639.7032916,641.0103693,642.3172019,\
        643.6237901,644.9301344,646.2362357,647.5420945,648.8477115,650.1530874,651.458223,652.7631187,\
        654.0677754,655.3721937,656.6763742,657.9803177,659.2840249,660.5874962,661.8907326,663.1937346,\
        664.4965029,665.7990382,667.1013411,668.4034124,669.7052526,671.0068625,672.3082428,673.6093941,\
        674.9103171,676.2110124,677.5114808,678.8117229,680.1117394,681.4115309,682.7110982,684.0104418,\
        685.3095625,686.608461,687.9071379,689.2055939,690.5038297,691.8018459,693.0996432,694.3972222,\
        695.6945838,696.9917285,698.288657,699.5853699,700.881868,702.178152,703.4742224,704.77008,\
        706.0657254,707.3611594,708.6563825,709.9513955,711.246199,712.5407938,713.8351804,715.1293596,\
        716.4233319,717.7170982,719.0106591,720.3040152,721.5971672,722.8901158,724.1828617,725.4754055,\
        726.7677479,728.0598896,729.3518313,730.6435736,731.9351172,733.2264627,734.5176109,735.8085624,\
        737.0993179,738.3898781,739.6802436,740.9704152,742.2603934,743.5501789,744.8397725,746.1291748,\
        747.4183865,748.7074082,749.9962407,751.2848845,752.5733404,753.8616091,755.1496911,756.4375873,\
        757.7252982,759.0128245,760.300167,761.5873262,762.8743029,764.1610977,765.4477113,766.7341443,\
        768.0203975,769.3064716,770.5923671,771.8780848,773.1636253,774.4489893,775.7341775,777.0191905,\
        778.3040291,779.5886939,780.8731855,782.1575047,783.4416521,784.7256284,786.0094343,787.2930704,\
        788.5765374,789.859836,791.1429669,792.4259307,793.7087281,794.9913597,796.2738263,797.5561286,\
        798.8382671,800.1202426,801.4020557,802.6837071,803.9651976,805.2465277,806.5276981,807.8087095,\
        809.0895626,810.3702581,811.6507965,812.9311787,814.2114052,815.4914768,816.7713941,818.0511578,\
        819.3307685,820.610227,821.8895339,823.1686899,824.4476956,825.7265517,827.005259,828.283818,\
        829.5622294,830.840494,832.1186124,833.3965852,834.6744132,835.952097,837.2296372,838.5070346,\
        839.7842899,841.0614036,842.3383765,843.6152093,844.8919026,846.1684571,847.4448734,848.7211523,\
        849.9972944,851.2733004,852.5491709,853.8249067,855.1005083,856.3759766,857.6513121,858.9265155,\
        860.2015875,861.4765288,862.75134,864.0260218,865.300575,866.5750001,867.8492978,869.1234688,\
        870.3975138,871.6714335,872.9452284,874.2188994,875.4924471,876.7658721,878.0391751,879.3123568,\
        880.5854178,881.8583589,883.1311807,884.4038839,885.6764692,886.9489371,888.2212885,889.4935239,\
        890.7656441,892.0376497,893.3095414,894.5813199,895.8529858,897.1245398,898.3959826,899.6673149,\
        900.9385373,902.2096504,903.4806551,904.7515519,906.0223416,907.2930247,908.563602,909.8340741,\
        911.1044418,912.3747056,913.6448663,914.9149245,916.184881,917.4547363,918.7244911,919.9941462,\
        921.2637022,922.5331597,923.8025195,925.0717823,926.3409486,927.6100191,928.8789946,930.1478757,\
        931.4166631,932.6853574,933.9539594,935.2224697,936.4908889,937.7592178,939.027457,940.2956072,\
        941.5636691,942.8316432,944.0995305,945.3673313,946.6350466,947.9026769,949.1702228,950.4376852,\
        951.7050646,952.9723617,954.2395772,955.5067118,956.7737661,958.0407408,959.3076367,960.5744542,\
        961.8411942,963.1078573,964.3744442,965.6409556,966.907392,968.1737543,969.440043,970.7062589,\
        971.9724026,973.2384747,974.5044761,975.7704072,977.0362689,978.3020618,979.5677865,980.8334437,\
        982.0990341,983.3645585,984.6300173,985.8954114,987.1607413,988.4260078,989.6912116,990.9563533,\
        992.2214335,993.486453,994.7514124,996.0163125,997.2811538,998.545937,999.8106629,1001.075332,\
        1002.339945,1003.604503,1004.869006,1006.133455,1007.397851,1008.662194,1009.926485,1011.190725,\
        1012.454914,1013.719053,1014.983143,}\n";
        hdrFile.close();
    }
    else
    {
        // cout << "Failed to open header file." << endl;
        LOG(ERROR) << "Failed to open header file.";
    }
    return;
}
